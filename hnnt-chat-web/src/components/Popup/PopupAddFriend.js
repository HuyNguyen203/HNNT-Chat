import { useState, useEffect } from 'react';
import { IoClose } from 'react-icons/io5';
import { getUserByNumberOrEmail, searchByPhone, sendFriendRequest } from '../../screens/Home/api';
import { acceptFriendReponse, refuseFriendReponse } from '../../screens/Contacts/api';

const data = [
    'Tr·∫ßn VƒÉn A',
    'Tr·∫ßn VƒÉn B',
    'Tr·∫ßn VƒÉn C',
    'Nguy·ªÖn VƒÉn D',
    'L√™ Th·ªã E',
    'Ph·∫°m VƒÉn F',
    'Ho√†ng Th·ªã G',
    'V≈© VƒÉn H',
    'ƒê·∫∑ng Th·ªã I',
    'B√πi VƒÉn J',
    'Ng√¥ Th·ªã K',
    'ƒê·ªó VƒÉn L',
    'Tr·ªãnh VƒÉn M',
    'H·ªì Th·ªã N',
    'T√¥ VƒÉn O',
];

const PopupAddFriend = ({ isOpen, onClose }) => {
    const [visibleCount, setVisibleCount] = useState(5);
    const [searchNumber, setSearchNumber] = useState('');
    const [results, setResults] = useState([]);

    const handleSearch = async () => {
        if (searchNumber.trim() === '') {
            alert('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
            return;
        }

        try {
            const data = await getUserByNumberOrEmail(searchNumber);
            if (data) {
                console.log('K·∫øt qu·∫£ t√¨m ki·∫øm:', data);
            } else {
                alert('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o');
            }
        } catch (error) {
            console.error('L·ªói khi t√¨m ki·∫øm', error);
        }
    };

    //debounce t√¨m ki·∫øm
    useEffect(() => {
        if (searchNumber.length === 0) return;

        const timeout = setTimeout(() => {
            const fetchData = async () => {
                const data = await searchByPhone(searchNumber);
                setResults(data);
            };
            fetchData();
        }, 300);

        return () => clearTimeout(timeout);
    }, [searchNumber]);

    const handleRequestFriend = async (user) => {
        try {
            await sendFriendRequest(user?.id);
            alert(`ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n ƒë·∫øn ${user?.name}`);
        } catch (error) {}
    };

    const handleCancelRequest = async (user) => {
        try {
            await refuseFriendReponse(user?.friendRequestId);
            alert(`ƒê√£ h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n ƒë·∫øn ${user?.name}`);
        } catch (error) {
            console.error('L·ªói khi h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n', error);
        }
    };

    const handleAcceptRequest = async (user) => {
        try {
            await acceptFriendReponse(user?.friendRequestId);
            alert(`ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${user?.name}`);
        } catch (error) {
            console.error('L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n', error);
        }
    };

    // M·ªói khi m·ªü popup, reset l·∫°i s·ªë ng∆∞·ªùi hi·ªÉn th·ªã
    useEffect(() => {
        if (isOpen) {
            setVisibleCount(5);
            setSearchNumber('');
            setResults([]);
        }
    }, [isOpen]);

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-[#fff] w-96 rounded-lg shadow-lg max-h-[90vh] flex flex-col  dark:bg-gray-900 dark:text-gray-300">
                {/* Header */}
                <div className="flex justify-between items-center p-3 border-b border-gray-400">
                    <h2 className="text-lg font-semibold">Th√™m b·∫°n</h2>
                    <button onClick={onClose}>
                        <IoClose className="text-xl hover:text-gray-400" />
                    </button>
                </div>

                {/* Body v·ªõi Scroll */}
                <div className="p-4 flex-1">
                    {/* √î nh·∫≠p s·ªë ƒëi·ªán tho·∫°i */}
                    <div className="flex items-center space-x-2 border-b border-gray-400 pb-2">
                        <span className="text-lg">üáªüá≥ (+84)</span>
                        <input
                            type="text"
                            placeholder="S·ªë ƒëi·ªán tho·∫°i"
                            className="bg-transparent border-none outline-none w-full"
                            value={searchNumber}
                            onChange={(e) => setSearchNumber(e.target.value)}
                        />
                    </div>

                    {/* G·ª£i √Ω k·∫øt b·∫°n */}
                    <div className="mt-4">
                        <h3 className="text-sm text-gray-400">C√≥ th·ªÉ b·∫°n quen</h3>
                        <div className="mt-2 max-h-[300px] overflow-y-auto">
                            <ul className="space-y-3">
                                {results.map((user, index) => (
                                    <li key={index} className="flex justify-between items-center">
                                        <div className="flex items-center space-x-3">
                                            <div className="w-10 h-10 bg-gray-500 rounded-full">
                                                <img src={user.avatar} alt="avatar" />
                                            </div>
                                            <div>
                                                <p className="text-sm">{user.name}</p>
                                                <p className="text-xs text-gray-400">T·ª´ g·ª£i √Ω k·∫øt b·∫°n</p>
                                            </div>
                                        </div>

                                        {user.status === 'none' && (
                                            <button
                                                onClick={() => handleRequestFriend(user)}
                                                className="text-blue-500 border border-blue-500 px-3 py-1 rounded-lg text-xs"
                                            >
                                                K·∫øt b·∫°n
                                            </button>
                                        )}
                                        {user.status === 'sent' && (
                                            <button
                                                onClick={() => handleCancelRequest(user)}
                                                className="text-red-500 border border-red-500 px-3 py-1 rounded-lg text-xs"
                                            >
                                                H·ªßy l·ªùi m·ªùi
                                            </button>
                                        )}
                                        {user.status === 'received' && (
                                            <button
                                                onClick={() => handleAcceptRequest(user)}
                                                className="text-green-500 border border-green-500 px-3 py-1 rounded-lg text-xs"
                                            >
                                                Ch·∫•p nh·∫≠n l·ªùi m·ªùi
                                            </button>
                                        )}
                                    </li>
                                ))}
                            </ul>
                        </div>
                        {/* {visibleCount < data.length && (
                            <button
                                className="mt-3 text-blue-500 text-sm w-full text-center"
                                onClick={() => setVisibleCount(visibleCount + 10)}
                            >
                                Xem th√™m
                            </button>
                        )} */}
                    </div>
                </div>

                {/* Footer */}
                <div className="flex justify-end p-4 border-t border-gray-200 space-x-3">
                    <button onClick={onClose} className="px-4 py-2 text-white bg-gray-400 rounded-lg">
                        H·ªßy
                    </button>
                    <button className="px-4 py-2 text-white bg-blue-600 text rounded-lg" onClick={handleSearch}>
                        T√¨m ki·∫øm
                    </button>
                </div>
            </div>
        </div>
    );
};

export default PopupAddFriend;
