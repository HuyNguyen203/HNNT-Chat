// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid()) // ID dạng UUID
  name      String   @db.VarChar(255)
  number    String   @unique @db.VarChar(20)
  password  String
  avatar    String?
  status    String?
  birthDate DateTime?
  location  String?
  gender    String   @db.VarChar(10) // "Nam", "Nữ", "Khác"
  currentAvatar String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentFriendRequests    Friend[] @relation("SentFriends")
  receivedFriendRequests Friend[] @relation("ReceivedFriends")

  chatParticipants ChatParticipant[]
  messages        Message[]
  reactions       Reaction[]
}

model Friend {
  id        String   @id @default(uuid()) // ID dạng UUID
  account   Account @relation("SentFriends", fields: [accountId], references: [id], onDelete: Cascade)
  friend    Account @relation("ReceivedFriends", fields: [friendId], references: [id], onDelete: Cascade)
  accountId String
  friendId  String

  @@unique([accountId, friendId]) // Đảm bảo không bị trùng lặp bạn bè
}

model Chat {
  id        String   @id @default(uuid()) // ID dạng UUID
  isGroup   Boolean  @default(false) // true nếu là group chat
  name      String?  @db.VarChar(255) // Tên nhóm nếu là group chat
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatParticipant[]
  messages    Message[]
}

enum ChatRole {
  MEMBER
  LEADER
}

model ChatParticipant {
  id        String   @id @default(uuid()) // ID dạng UUID
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  chatId    String
  accountId String

  pin       Boolean  @default(false) // User có ghim chat này không?
  notify    Boolean  @default(true)  // User có bật thông báo cho chat này không?
  role      ChatRole @default(MEMBER) // Vai trò của người dùng trong chat

  @@unique([chatId, accountId]) // Đảm bảo mỗi user chỉ có 1 trạng thái trong mỗi chat
}

model Message {
  id        String   @id @default(uuid()) // ID dạng UUID
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    Account  @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String
  senderId  String

  content   String?
  type      String   @db.VarChar(20) // 'text', 'image', 'video', 'file'
  time      DateTime @default(now())
  deletedBy String[] // Danh sách UUID của các user đã xóa tin nhắn này
  destroy   Boolean  @default(false) // Tin nhắn tự hủy?

  reactions Reaction[]
}

model Reaction {
  id        String   @id @default(uuid()) // ID dạng UUID
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      Account  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  userId    String
  reaction  String   @db.VarChar(10)
  sum       Int      @default(1)
}