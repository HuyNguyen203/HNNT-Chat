// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid()) // ID dạng UUID
  name      String   @db.VarChar(255)
  number    String   @unique @db.VarChar(20)
  email  String @unique @db.VarChar(255)
  password  String
  avatar    String?
  status    String?
  birthDate DateTime?
  location  String?
  gender    String   @db.VarChar(10) // "Nam", "Nữ", "Khác"
  currentAvatars String[] @default([])
  pushToken String? @db.VarChar(255) // Token for push notifications
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Category[]

  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")

  friends1 Friend[] @relation("UserFriends1") // Quan hệ khi là user1
  friends2 Friend[] @relation("UserFriends2") // Quan hệ khi là user2

  chatParticipants ChatParticipant[]
  messages        Message[]
  reactions       Reaction[]
  loggedInDevices LoggedInDevice[]
  blockedUsers BlockedUser[] @relation("Blocker") // Người dùng đã chặn
  blockedBy    BlockedUser[] @relation("Blocked") // Người dùng bị chặn bởi người khác
}

model FriendRequest {
  id        String   @id @default(uuid())
  sender    Account  @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  Account  @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  senderId  String
  receiverId String
  block     Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([senderId, receiverId]) // Đảm bảo chỉ có một lời mời giữa 2 người
}

model Friend {
  id         String  @id @default(uuid())
  user1      Account @relation("UserFriends1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2      Account @relation("UserFriends2", fields: [user2Id], references: [id], onDelete: Cascade)
  user1Id    String
  user2Id    String

  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id]) // Đảm bảo không có cặp bạn bè trùng nhau
}

model Chat {
  id        String   @id @default(uuid()) // ID dạng UUID
  isGroup   Boolean  @default(false) // true nếu là group chat
  name      String?  @db.VarChar(255) // Tên nhóm nếu là group chat
  avatar    String?  @db.VarChar(255) // Avatar nếu là group chat
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatParticipant[]
  messages    Message[]
}

enum ChatRole {
  MEMBER
  LEADER
}

model Category {
  id        String   @id @default(uuid()) // ID dạng UUID
  name      String
  color     String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade) 
  accountId String

  participants ChatParticipant[]
}

model ChatParticipant {
  id        String   @id @default(uuid()) // ID dạng UUID
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category  Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  chatId    String
  accountId String
  categoryId String?
  priority Boolean? @default(true)
  readed Boolean? @default(false)


  pin       Boolean  @default(false) // User có ghim chat này không?
  notify    Boolean  @default(true)  // User có bật thông báo cho chat này không?
  role      ChatRole @default(MEMBER) // Vai trò của người dùng trong chat

  @@unique([chatId, accountId]) // Đảm bảo mỗi user chỉ có 1 trạng thái trong mỗi chat
}

model Message {
  id        String   @id @default(uuid()) // ID dạng UUID
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    Account  @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String
  senderId  String

  content   String?
  type      String   @db.VarChar(20) // 'text', 'image', 'video', 'file'
  time      DateTime @default(now())
  deletedBy String[] // Danh sách UUID của các user đã xóa tin nhắn này
  destroy   Boolean  @default(false) // Tin nhắn tự hủy?
  pin   Boolean  @default(false) // Ghim tin nhắn tự hủy?
  
  // Thông tin file đính kèm (chỉ áp dụng khi type = 'file', 'image', 'video')
  fileName   String? // Tên file
  fileSize   String? // Kích thước file (có thể dùng String hoặc Int nếu cần số)
  fileType   String? // Loại file (ví dụ: 'pdf', 'excel', 'word')

  reactions Reaction[]

  // Quan hệ tự tham chiếu (reply)
  replyToId String?  @unique  // ID của tin nhắn gốc, phải là duy nhất
  replyTo   Message? @relation("Reply", fields: [replyToId], references: [id], onDelete: SetNull)
  reply     Message? @relation("Reply") 
}

model Reaction {
  id        String   @id @default(uuid()) // ID dạng UUID
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      Account  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  userId    String
  reaction  String   @db.VarChar(10)
  sum       Int      @default(1)
}

model LoggedInDevice {
  id          String   @id @default(uuid())
  user        Account  @relation(fields: [userId], references: [id])
  userId      String
  deviceId    String
  deviceName  String
  platform    String
  accessToken String
  ipAddress   String?
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
}

model BlockedUser {
  id          String   @id @default(uuid()) // ID dạng UUID
  blocker     Account  @relation("Blocker", fields: [blockerAccountId], references: [id], onDelete: Cascade)
  blocked     Account  @relation("Blocked", fields: [blockedAccountId], references: [id], onDelete: Cascade)
  blockerAccountId   String
  blockedAccountId   String
  createdAt   DateTime @default(now()) // Thời gian chặn

  @@unique([blockerAccountId, blockedAccountId]) // Đảm bảo một người chỉ chặn một người khác một lần
}


