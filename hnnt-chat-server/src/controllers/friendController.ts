import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { AuthRequest } from '../types/authRequest';

const prisma = new PrismaClient();

export const sendFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        // L·∫•y senderId t·ª´ token thay v√¨ req.body
        const senderId = req.user?.id; // Gi·∫£ s·ª≠ token decoded g·∫Øn v√†o req.user
        const { receiverId } = req.body;

        // Ki·ªÉm tra senderId c√≥ t·ªìn t·∫°i t·ª´ token kh√¥ng
        if (!senderId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        if (senderId === receiverId) {
            res.status(400).json({ message: 'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n cho ch√≠nh m√¨nh!' });
            return;
        }

        // Check senderId and receiverId
        const sender = await prisma.account.findUnique({ where: { id: senderId } });
        const receiver = await prisma.account.findUnique({ where: { id: receiverId } });

        if (!sender || !receiver) {
            res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
            return;
        }

        // Check existingRequest
        const existingRequest = await prisma.friendRequest.findFirst({
            where: {
                OR: [
                    { senderId, receiverId },
                    { senderId: receiverId, receiverId: senderId },
                ],
            },
        });

        // Check existingFriend
        const existingFriend = await prisma.friend.findFirst({
            where: {
                OR: [
                    { user1Id: senderId, user2Id: receiverId },
                    { user1Id: receiverId, user2Id: senderId },
                ],
            },
        });

        if (existingFriend) {
            res.status(400).json({ message: 'C√°c b·∫°n ƒë√£ l√† b·∫°n c·ªßa nhau!' });
            return;
        }

        if (existingRequest) {
            res.status(400).json({ message: 'L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ t·ªìn t·∫°i!' });
            return;
        }

        const friendRequest = await prisma.friendRequest.create({
            data: { senderId, receiverId },
        });

        res.status(201).json(friendRequest);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

export const cancelFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // ID of the friendRequest
        const userId = req.user?.id; // ID of the logged-in user (from token)

        // Check if userId exists
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // Find the friendRequest and check if the user is either the sender or receiver
        const request = await prisma.friendRequest.findUnique({
            where: { id },
        });

        if (!request || (request.senderId !== userId && request.receiverId !== userId)) {
            res.status(400).json({
                message: 'L·ªùi m·ªùi k·∫øt b·∫°n kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy!',
            });
            return;
        }

        // Delete the friendRequest
        await prisma.friendRequest.delete({ where: { id } });

        res.status(200).json({ message: 'ƒê√£ h·ªßy l·ªùi m·ªùi k·∫øt b·∫°n!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

// üìå Accept friend request
export const acceptFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // ID c·ªßa friendRequest
        const userId = req.user?.id; // ID c·ªßa ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p (l·∫•y t·ª´ token)

        // Ki·ªÉm tra userId t·ª´ token
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // T√¨m friendRequest v√† ki·ªÉm tra xem ng∆∞·ªùi ƒëƒÉng nh·∫≠p c√≥ ph·∫£i l√† receiver kh√¥ng
        const request = await prisma.friendRequest.findUnique({
            where: {
                id,
                block: false,
                receiverId: userId, // ƒê·∫£m b·∫£o ch·ªâ receiver m·ªõi c√≥ th·ªÉ ch·∫•p nh·∫≠n
            },
        });

        if (!request) {
            res.status(400).json({
                message: 'L·ªùi m·ªùi k·∫øt b·∫°n kh√¥ng t·ªìn t·∫°i, ƒë√£ b·ªã ch·∫∑n, ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn ch·∫•p nh·∫≠n!',
            });
            return;
        }

        // Ki·ªÉm tra xem ƒë√£ l√† b·∫°n ch∆∞a (ƒë·ªÉ tr√°nh tr√πng l·∫∑p)
        const existingFriend = await prisma.friend.findFirst({
            where: {
                OR: [
                    { user1Id: request.senderId, user2Id: request.receiverId },
                    { user1Id: request.receiverId, user2Id: request.senderId },
                ],
            },
        });

        if (existingFriend) {
            // N·∫øu ƒë√£ l√† b·∫°n, x√≥a request v√† tr·∫£ v·ªÅ th√¥ng b√°o
            await prisma.friendRequest.delete({ where: { id } });
            res.status(400).json({ message: 'C√°c b·∫°n ƒë√£ l√† b·∫°n c·ªßa nhau!' });
            return;
        }

        // T·∫°o m·ªëi quan h·ªá b·∫°n b√®
        await prisma.friend.create({
            data: {
                user1Id: request.senderId,
                user2Id: request.receiverId,
            },
        });

        // X√≥a friendRequest
        await prisma.friendRequest.delete({ where: { id } });

        res.status(200).json({ message: 'ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

// üìå Delete friend
export const deleteFriend = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // ID of the friend (friendId)
        const userId = req.user?.id; // ID of the logged-in user (from token)

        // Check if userId exists
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // Find the friendship relationship where the user is either user1 or user2
        const friendship = await prisma.friend.findFirst({
            where: {
                OR: [
                    { user1Id: userId, user2Id: id },
                    { user1Id: id, user2Id: userId },
                ],
            },
        });

        if (!friendship) {
            res.status(400).json({
                message: 'M·ªëi quan h·ªá b·∫°n b√® kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a!',
            });
            return;
        }

        // Delete the friendship relationship
        await prisma.friend.delete({ where: { id: friendship.id } });

        res.status(200).json({ message: 'ƒê√£ x√≥a k·∫øt b·∫°n!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

// üìå Get list friend
export const getListFriend = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const userId = req.user.id;

        if (!userId) {
            res.status(401).json({ message: 'Unauthorized - No user ID found' });
            return;
        }

        const friends = await prisma.friend.findMany({
            where: {
                OR: [{ user1Id: userId }, { user2Id: userId }],
            },
            include: {
                user1: true,
                user2: true,
            },
        });

        const friendList = friends.map((friend) => {
            const friendData = friend.user1Id === userId ? friend.user2 : friend.user1;
            return {
                id: friendData.id,
                name: friendData.name,
                avatar: friendData.avatar,
                status: friendData.status,
            };
        });

        res.json(friendList);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

//üìå Get list friend request
export const getListFriendRequest = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const userId = req.user?.id; // L·∫•y ID c·ªßa user t·ª´ token, kh√¥ng c·∫ßn t·ª´ params

        // Ki·ªÉm tra userId t·ª´ token
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n m√† user n√†y nh·∫≠n ƒë∆∞·ª£c
        const friendRequests = await prisma.friendRequest.findMany({
            where: {
                receiverId: userId, // L·ªùi m·ªùi g·ª≠i ƒë·∫øn user hi·ªán t·∫°i
            },
            include: {
                sender: true, // L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi
            },
        });

        // Map d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ th√¥ng tin c·ªßa sender
        const receivedList = friendRequests.map((request) => ({
            requestId: request.id, // ID c·ªßa friendRequest ƒë·ªÉ d√πng cho accept/cancel
            senderId: request.sender.id,
            name: request.sender.name,
            number: request.sender.number,
            avatar: request.sender.avatar,
            status: request.sender.status,
            birthDate: request.sender.birthDate,
            location: request.sender.location,
            gender: request.sender.gender,
            createdAt: request.createdAt, // Th·ªùi gian t·∫°o l·ªùi m·ªùi
        }));

        res.status(200).json(receivedList);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

//üìå Block request
export const blockRequest = async (req: Request, res: Response): Promise<void> => {
    try {
        const { senderId, receiverId } = req.body;

        if (senderId === receiverId) {
            res.status(400).json({ message: 'Kh√¥ng block cho ch√≠nh m√¨nh!' });
            return;
        }

        //Check senderId and receiverId
        const sender = await prisma.account.findUnique({ where: { id: senderId } });
        const receiver = await prisma.account.findUnique({ where: { id: receiverId } });

        if (!sender || !receiver) {
            res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
            return;
        }

        // Check existingRequest
        const existingRequest = await prisma.friendRequest.findFirst({
            where: {
                OR: [
                    { senderId, receiverId },
                    { senderId: receiverId, receiverId: senderId },
                ],
            },
        });

        // Check existingFriend
        const existingFriend = await prisma.friend.findFirst({
            where: {
                OR: [
                    { user1Id: senderId, user2Id: receiverId },
                    { user1Id: receiverId, user2Id: senderId },
                ],
            },
        });

        if (existingFriend) {
            const updatedRequest = await prisma.friend.delete({
                where: { id: existingFriend.id },
            });
            res.json(updatedRequest);
        }

        if (existingRequest) {
            const updatedRequest = await prisma.friendRequest.update({
                where: { id: existingRequest.id },
                data: { senderId: senderId, receiverId: receiverId, block: true },
            });
            res.json(updatedRequest);
        } else {
            const blockRequest = await prisma.friendRequest.create({
                data: { senderId, receiverId, block: true },
            });
            res.status(201).json(blockRequest);
        }
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

//üìå List Block request
export const ListBlockRequest = async (req: Request, res: Response): Promise<void> => {
    try {
        const { userId } = req.params; // id c·ªßa user

        const blockRequests = await prisma.friendRequest.findMany({
            where: {
                senderId: userId,
                block: true,
            },
            include: { sender: true },
        });

        const sentList = blockRequests.map((request) => {
            return {
                id: request.sender.id,
                name: request.sender.name,
                number: request.sender.number,
                avatar: request.sender.avatar,
                status: request.sender.status,
                birthDate: request.sender.birthDate,
                location: request.sender.location,
                gender: request.sender.gender,
                createdAt: request.sender.createdAt,
            };
        });

        res.json(sentList);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

//üìå List Block request
export const CancelBlockRequest = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // id c·ªßa friend request

        const blockRequest = await prisma.friendRequest.findUnique({
            where: {
                id: id,
                block: true,
            },
            include: { sender: true },
        });

        if (blockRequest) {
            const updatedRequest = await prisma.friendRequest.delete({
                where: { id: blockRequest.id },
            });
            res.json(updatedRequest);
        } else {
            res.status(404).json({ message: 'Th√¥ng tin kh√¥ng t·ªìn t·∫°i!' });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

//üìå Get list friend request by sender
export const getListFriendRequestBySender = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const userId = req.user?.id; // L·∫•y ID c·ªßa user t·ª´ token, kh√¥ng c·∫ßn t·ª´ params

        // Ki·ªÉm tra userId t·ª´ token
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        const friendRequests = await prisma.friendRequest.findMany({
            where: {
                senderId: userId,
            },
            include: { receiver: true },
        });

        const sentList = friendRequests.map((request) => {
            return {
                id: request.receiver.id,
                name: request.receiver.name,
                number: request.receiver.number,
                avatar: request.receiver.avatar,
                status: request.receiver.status,
                birthDate: request.receiver.birthDate,
                location: request.receiver.location,
                gender: request.receiver.gender,
                createdAt: request.receiver.createdAt,
            };
        });

        res.json(sentList);
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

// Cancel friend request by senderId and receiverId
export const cancelFriendRequestBySender = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const senderId = req.user?.id; // L·∫•y senderId t·ª´ token
        if (!senderId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // L·∫•y receiverId t·ª´ params
        const receiverId = req.params.receiverId; // L·∫•y receiverId t·ª´ params

        // Ki·ªÉm tra senderId v√† receiverId c√≥ t·ªìn t·∫°i kh√¥ng
        if (!senderId || !receiverId) {
            res.status(400).json({ message: 'Thi·∫øu th√¥ng tin senderId ho·∫∑c receiverId!' });
            return;
        }

        // Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i y√™u c·∫ßu k·∫øt b·∫°n gi·ªØa sender v√† receiver kh√¥ng
        const existingRequest = await prisma.friendRequest.findFirst({
            where: {
                OR: [
                    { senderId, receiverId },
                    { senderId: receiverId, receiverId: senderId },
                ],
            },
        });

        if (!existingRequest) {
            res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu k·∫øt b·∫°n!' });
            return;
        }

        // X√≥a y√™u c·∫ßu k·∫øt b·∫°n
        await prisma.friendRequest.delete({ where: { id: existingRequest.id } });

        res.status(200).json({ message: 'ƒê√£ h·ªßy y√™u c·∫ßu k·∫øt b·∫°n!' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};

// /friends/check-friend/:friendId
export const checkFriend = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        const userId = req.user?.id; // L·∫•y ID c·ªßa user t·ª´ token
        const friendId = req.params.friendId; // L·∫•y ID c·ªßa b·∫°n b√® t·ª´ params

        // Ki·ªÉm tra userId t·ª´ token
        if (!userId) {
            res.status(401).json({ message: 'Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng!' });
            return;
        }

        // Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i m·ªëi quan h·ªá b·∫°n b√® gi·ªØa user v√† friend kh√¥ng
        const friendship = await prisma.friend.findFirst({
            where: {
                OR: [
                    { user1Id: userId, user2Id: friendId },
                    { user1Id: friendId, user2Id: userId },
                ],
            },
        });

        if (friendship) {
            res.status(200).json({ result: true, message: 'C√°c b·∫°n ƒë√£ l√† b·∫°n c·ªßa nhau!' });
        } else {
            res.status(404).json({ result: false, message: 'Kh√¥ng t√¨m th·∫•y m·ªëi quan h·ªá b·∫°n b√®!' });
        }
    } catch (error) {
        res.status(500).json({ message: 'L·ªói server', error: (error as Error).message });
    }
};
